From c230e98d55c759a9b8a6a9187db75bf83f82b82e Mon Sep 17 00:00:00 2001
From: Jonas Karlman <jonas@kwiboo.se>
Date: Sun, 4 Nov 2018 10:27:36 +0100
Subject: [PATCH] windowing/gbm: fallback to non-alpha visual id

---
 xbmc/utils/EGLUtils.cpp                       | 10 ++++++++-
 xbmc/utils/EGLUtils.h                         |  1 +
 xbmc/windowing/gbm/DRMUtils.cpp               |  2 +-
 xbmc/windowing/gbm/WinSystemGbm.cpp           |  7 ++----
 xbmc/windowing/gbm/WinSystemGbm.h             |  2 ++
 xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp | 22 +++++++++++++------
 6 files changed, 30 insertions(+), 14 deletions(-)

diff --git a/xbmc/utils/EGLUtils.cpp b/xbmc/utils/EGLUtils.cpp
index 3c386ad9e6c2..27a0567f967d 100644
--- a/xbmc/utils/EGLUtils.cpp
+++ b/xbmc/utils/EGLUtils.cpp
@@ -279,7 +279,7 @@ bool CEGLContextUtils::ChooseConfig(EGLint renderableType, EGLint visualId)
 
   if (visualId != 0 && visualId != id)
   {
-    CLog::Log(LOGDEBUG, "failed to find matching EGL visual id");
+    CLog::Log(LOGDEBUG, "failed to find EGL config with EGL_NATIVE_VISUAL_ID={}", visualId);
     return false;
   }
 
@@ -298,6 +298,14 @@ bool CEGLContextUtils::ChooseConfig(EGLint renderableType, EGLint visualId)
   return true;
 }
 
+EGLint CEGLContextUtils::GetConfigAttrib(EGLint attribute) const
+{
+  EGLint value{0};
+  if (eglGetConfigAttrib(m_eglDisplay, m_eglConfig, attribute, &value) != EGL_TRUE)
+    CEGLUtils::LogError("failed to query EGL attibute");
+  return value;
+}
+
 bool CEGLContextUtils::CreateContext(CEGLAttributesVec contextAttribs)
 {
   if (m_eglContext != EGL_NO_CONTEXT)
diff --git a/xbmc/utils/EGLUtils.h b/xbmc/utils/EGLUtils.h
index 1a9cf75d1eb8..11ae2ddd9b33 100644
--- a/xbmc/utils/EGLUtils.h
+++ b/xbmc/utils/EGLUtils.h
@@ -194,6 +194,7 @@ class CEGLContextUtils final
   bool SetVSync(bool enable);
   bool TrySwapBuffers();
   bool IsPlatformSupported() const;
+  EGLint GetConfigAttrib(EGLint attribute) const;
 
   EGLDisplay GetEGLDisplay() const
   {
diff --git a/xbmc/windowing/gbm/DRMUtils.cpp b/xbmc/windowing/gbm/DRMUtils.cpp
index fceaf770d363..6f3e5f95e53f 100644
--- a/xbmc/windowing/gbm/DRMUtils.cpp
+++ b/xbmc/windowing/gbm/DRMUtils.cpp
@@ -465,7 +465,7 @@ bool CDRMUtils::FindPlanes()
     CLog::Log(LOGDEBUG, "CDRMUtils::%s - no drm modifiers present for the overlay plane", __FUNCTION__);
     m_overlay_plane->modifiers_map.emplace(DRM_FORMAT_ARGB8888, std::vector<uint64_t>{DRM_FORMAT_MOD_LINEAR});
     m_overlay_plane->modifiers_map.emplace(DRM_FORMAT_XRGB8888, std::vector<uint64_t>{DRM_FORMAT_MOD_LINEAR});
-    m_overlay_plane->modifiers_map.emplace(DRM_FORMAT_XRGB2101010, std::vector<uint64_t>{DRM_FORMAT_MOD_LINEAR});
+    m_overlay_plane->modifiers_map.emplace(DRM_FORMAT_ARGB2101010, std::vector<uint64_t>{DRM_FORMAT_MOD_LINEAR});
     m_overlay_plane->modifiers_map.emplace(DRM_FORMAT_XRGB2101010, std::vector<uint64_t>{DRM_FORMAT_MOD_LINEAR});
   }
 
diff --git a/xbmc/windowing/gbm/WinSystemGbm.cpp b/xbmc/windowing/gbm/WinSystemGbm.cpp
index 8d5888891ac0..7255f3df6813 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbm.cpp
@@ -132,12 +132,9 @@ bool CWinSystemGbm::CreateNewWindow(const std::string& name,
     return false;
   }
 
-  std::vector<uint64_t> *modifiers = m_DRM->GetOverlayPlaneModifiersForFormat(m_DRM->GetOverlayPlane()->format);
+  std::vector<uint64_t> *modifiers = m_DRM->GetOverlayPlaneModifiersForFormat(m_format);
 
-  // the gbm format needs alpha support
-  uint32_t format = CDRMUtils::FourCCWithAlpha(m_DRM->GetOverlayPlane()->GetFormat());
-
-  if (!m_GBM->CreateSurface(res.iWidth, res.iHeight, format, modifiers->data(), modifiers->size()))
+  if (!m_GBM->CreateSurface(res.iWidth, res.iHeight, m_format, modifiers->data(), modifiers->size()))
   {
     CLog::Log(LOGERROR, "CWinSystemGbm::%s - failed to initialize GBM", __FUNCTION__);
     return false;
diff --git a/xbmc/windowing/gbm/WinSystemGbm.h b/xbmc/windowing/gbm/WinSystemGbm.h
index 954e7737dfc9..127f96b01825 100644
--- a/xbmc/windowing/gbm/WinSystemGbm.h
+++ b/xbmc/windowing/gbm/WinSystemGbm.h
@@ -79,6 +79,8 @@ class CWinSystemGbm : public CWinSystemBase
   XbmcThreads::EndTime m_dispResetTimer;
   std::unique_ptr<OPTIONALS::CLircContainer, OPTIONALS::delete_CLircContainer> m_lirc;
   std::unique_ptr<CLibInputHandler> m_libinput;
+
+  uint32_t m_format = 0;
 };
 
 }
diff --git a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
index b087c5119b04..53a4e124503e 100644
--- a/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmEGLContext.cpp
@@ -22,9 +22,6 @@ bool CWinSystemGbmEGLContext::InitWindowSystemEGL(EGLint renderableType, EGLint
     return false;
   }
 
-  // we need to provide an alpha format to egl to workaround a mesa bug
-  int visualId = CDRMUtils::FourCCWithAlpha(CWinSystemGbm::GetDrm()->GetOverlayPlane()->format);
-
   if (!m_eglContext.CreatePlatformDisplay(m_GBM->GetDevice(), m_GBM->GetDevice()))
   {
     return false;
@@ -35,18 +32,29 @@ bool CWinSystemGbmEGLContext::InitWindowSystemEGL(EGLint renderableType, EGLint
     return false;
   }
 
-  if (!m_eglContext.ChooseConfig(renderableType, visualId))
+  uint32_t visualId = m_DRM->GetOverlayPlane()->format;
+
+  // prefer alpha visual id, fallback to non-alpha visual id
+  if (!m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithAlpha(visualId)) &&
+      !m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithoutAlpha(visualId)))
   {
     // fallback to 8bit format if no EGL config was found for 10bit
-    CWinSystemGbm::GetDrm()->GetOverlayPlane()->useFallbackFormat = true;
-    visualId = CDRMUtils::FourCCWithAlpha(CWinSystemGbm::GetDrm()->GetOverlayPlane()->GetFormat());
+    m_DRM->GetOverlayPlane()->useFallbackFormat = true;
+    visualId = m_DRM->GetOverlayPlane()->GetFormat();
 
-    if (!m_eglContext.ChooseConfig(renderableType, visualId))
+    if (!m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithAlpha(visualId)) &&
+        !m_eglContext.ChooseConfig(renderableType, CDRMUtils::FourCCWithoutAlpha(visualId)))
     {
       return false;
     }
   }
 
+  m_format = m_eglContext.GetConfigAttrib(EGL_NATIVE_VISUAL_ID);
+  if (!m_format)
+  {
+    return false;
+  }
+
   if (!CreateContext())
   {
     return false;

